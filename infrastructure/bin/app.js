#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const open_source_tracker_stack_1 = require("../lib/open-source-tracker-stack");
const app = new cdk.App();
// Get environment from context
const environment = app.node.tryGetContext('environment') || 'dev';
// Environment-specific configurations
const envConfigs = {
    dev: {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: 'us-east-1' },
        stackName: 'OpenSourceTrackerDevV2',
        domainName: undefined, // No custom domain for dev
        githubTokenSecretName: 'github-token-dev',
        devCredentialsSecretName: 'dev-credentials',
        dataCollectionSchedule: 'cron(0 */3 * * ? *)', // Every 3 hours starting at 00:00 UTC (4 PM PST)
        useSharedDatabase: true, // Dev uses shared database initially
        sharedDatabaseEnvironment: 'dev', // Use dev tables as the shared database
    },
    prod: {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: 'us-east-1' },
        stackName: 'OpenSourceTrackerProdV2',
        domainName: undefined, // Add your custom domain here if needed
        githubTokenSecretName: 'github-token-prod',
        devCredentialsSecretName: undefined, // No dev credentials for prod
        dataCollectionSchedule: 'cron(0 */3 * * ? *)', // Every 3 hours starting at 00:00 UTC (4 PM PST)
        useSharedDatabase: true, // Prod uses shared database initially
        sharedDatabaseEnvironment: 'dev', // Use dev tables as the shared database
    }
};
const config = envConfigs[environment];
if (!config) {
    throw new Error(`Invalid environment: ${environment}. Must be 'dev' or 'prod'`);
}
new open_source_tracker_stack_1.OpenSourceTrackerStack(app, config.stackName, {
    environment,
    domainName: config.domainName,
    githubTokenSecretName: config.githubTokenSecretName,
    devCredentialsSecretName: config.devCredentialsSecretName,
    dataCollectionSchedule: config.dataCollectionSchedule,
    useSharedDatabase: config.useSharedDatabase,
    sharedDatabaseEnvironment: config.sharedDatabaseEnvironment,
    env: config.env,
    description: `Open Source Tracker ${environment} environment`,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsZ0ZBQTBFO0FBRTFFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLCtCQUErQjtBQUMvQixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUM7QUFFbkUsc0NBQXNDO0FBQ3RDLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLEdBQUcsRUFBRTtRQUNILEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7UUFDdEUsU0FBUyxFQUFFLHdCQUF3QjtRQUNuQyxVQUFVLEVBQUUsU0FBUyxFQUFFLDJCQUEyQjtRQUNsRCxxQkFBcUIsRUFBRSxrQkFBa0I7UUFDekMsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsaURBQWlEO1FBQ2hHLGlCQUFpQixFQUFFLElBQUksRUFBRSxxQ0FBcUM7UUFDOUQseUJBQXlCLEVBQUUsS0FBSyxFQUFFLHdDQUF3QztLQUMzRTtJQUNELElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7UUFDdEUsU0FBUyxFQUFFLHlCQUF5QjtRQUNwQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHdDQUF3QztRQUMvRCxxQkFBcUIsRUFBRSxtQkFBbUI7UUFDMUMsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsaURBQWlEO1FBQ2hHLGlCQUFpQixFQUFFLElBQUksRUFBRSxzQ0FBc0M7UUFDL0QseUJBQXlCLEVBQUUsS0FBSyxFQUFFLHdDQUF3QztLQUMzRTtDQUNGLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsV0FBc0MsQ0FBQyxDQUFDO0FBRWxFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFdBQVcsMkJBQTJCLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQsSUFBSSxrREFBc0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUNoRCxXQUFXO0lBQ1gsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO0lBQzdCLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxxQkFBcUI7SUFDbkQsc0JBQXNCLEVBQUUsTUFBTSxDQUFDLHNCQUFzQjtJQUNyRCxpQkFBaUIsRUFBRSxNQUFNLENBQUMsaUJBQWlCO0lBQzNDLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyx5QkFBeUI7SUFDM0QsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHO0lBQ2YsV0FBVyxFQUFFLHVCQUF1QixXQUFXLGNBQWM7Q0FDOUQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IE9wZW5Tb3VyY2VUcmFja2VyU3RhY2sgfSBmcm9tICcuLi9saWIvb3Blbi1zb3VyY2UtdHJhY2tlci1zdGFjayc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbi8vIEdldCBlbnZpcm9ubWVudCBmcm9tIGNvbnRleHRcbmNvbnN0IGVudmlyb25tZW50ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52aXJvbm1lbnQnKSB8fCAnZGV2JztcblxuLy8gRW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbnNcbmNvbnN0IGVudkNvbmZpZ3MgPSB7XG4gIGRldjoge1xuICAgIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG4gICAgc3RhY2tOYW1lOiAnT3BlblNvdXJjZVRyYWNrZXJEZXZWMicsXG4gICAgZG9tYWluTmFtZTogdW5kZWZpbmVkLCAvLyBObyBjdXN0b20gZG9tYWluIGZvciBkZXZcbiAgICBnaXRodWJUb2tlblNlY3JldE5hbWU6ICdnaXRodWItdG9rZW4tZGV2JyxcbiAgICBkYXRhQ29sbGVjdGlvblNjaGVkdWxlOiAnY3JvbigwICovMyAqICogPyAqKScsIC8vIEV2ZXJ5IDMgaG91cnMgc3RhcnRpbmcgYXQgMDA6MDAgVVRDICg0IFBNIFBTVClcbiAgICB1c2VTaGFyZWREYXRhYmFzZTogdHJ1ZSwgLy8gRGV2IHVzZXMgc2hhcmVkIGRhdGFiYXNlIGluaXRpYWxseVxuICAgIHNoYXJlZERhdGFiYXNlRW52aXJvbm1lbnQ6ICdkZXYnLCAvLyBVc2UgZGV2IHRhYmxlcyBhcyB0aGUgc2hhcmVkIGRhdGFiYXNlXG4gIH0sXG4gIHByb2Q6IHtcbiAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuICAgIHN0YWNrTmFtZTogJ09wZW5Tb3VyY2VUcmFja2VyUHJvZFYyJyxcbiAgICBkb21haW5OYW1lOiB1bmRlZmluZWQsIC8vIEFkZCB5b3VyIGN1c3RvbSBkb21haW4gaGVyZSBpZiBuZWVkZWRcbiAgICBnaXRodWJUb2tlblNlY3JldE5hbWU6ICdnaXRodWItdG9rZW4tcHJvZCcsXG4gICAgZGF0YUNvbGxlY3Rpb25TY2hlZHVsZTogJ2Nyb24oMCAqLzMgKiAqID8gKiknLCAvLyBFdmVyeSAzIGhvdXJzIHN0YXJ0aW5nIGF0IDAwOjAwIFVUQyAoNCBQTSBQU1QpXG4gICAgdXNlU2hhcmVkRGF0YWJhc2U6IHRydWUsIC8vIFByb2QgdXNlcyBzaGFyZWQgZGF0YWJhc2UgaW5pdGlhbGx5XG4gICAgc2hhcmVkRGF0YWJhc2VFbnZpcm9ubWVudDogJ2RldicsIC8vIFVzZSBkZXYgdGFibGVzIGFzIHRoZSBzaGFyZWQgZGF0YWJhc2VcbiAgfVxufTtcblxuY29uc3QgY29uZmlnID0gZW52Q29uZmlnc1tlbnZpcm9ubWVudCBhcyBrZXlvZiB0eXBlb2YgZW52Q29uZmlnc107XG5cbmlmICghY29uZmlnKSB7XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBlbnZpcm9ubWVudDogJHtlbnZpcm9ubWVudH0uIE11c3QgYmUgJ2Rldicgb3IgJ3Byb2QnYCk7XG59XG5cbm5ldyBPcGVuU291cmNlVHJhY2tlclN0YWNrKGFwcCwgY29uZmlnLnN0YWNrTmFtZSwge1xuICBlbnZpcm9ubWVudCxcbiAgZG9tYWluTmFtZTogY29uZmlnLmRvbWFpbk5hbWUsXG4gIGdpdGh1YlRva2VuU2VjcmV0TmFtZTogY29uZmlnLmdpdGh1YlRva2VuU2VjcmV0TmFtZSxcbiAgZGF0YUNvbGxlY3Rpb25TY2hlZHVsZTogY29uZmlnLmRhdGFDb2xsZWN0aW9uU2NoZWR1bGUsXG4gIHVzZVNoYXJlZERhdGFiYXNlOiBjb25maWcudXNlU2hhcmVkRGF0YWJhc2UsXG4gIHNoYXJlZERhdGFiYXNlRW52aXJvbm1lbnQ6IGNvbmZpZy5zaGFyZWREYXRhYmFzZUVudmlyb25tZW50LFxuICBlbnY6IGNvbmZpZy5lbnYsXG4gIGRlc2NyaXB0aW9uOiBgT3BlbiBTb3VyY2UgVHJhY2tlciAke2Vudmlyb25tZW50fSBlbnZpcm9ubWVudGAsXG59KTsgIl19