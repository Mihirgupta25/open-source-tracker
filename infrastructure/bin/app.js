#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const open_source_tracker_stack_1 = require("../lib/open-source-tracker-stack");
const app = new cdk.App();
// Get environment from context
const environment = app.node.tryGetContext('environment') || 'staging';
// Environment-specific configurations
const envConfigs = {
    staging: {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: 'us-east-1' },
        stackName: 'OpenSourceTrackerStagingV2',
        domainName: undefined, // No custom domain for staging
        githubTokenSecretName: 'github-token-dev',
        devCredentialsSecretName: 'staging-credentials',
        dataCollectionSchedule: 'cron(0 */3 * * ? *)', // Every 3 hours starting at 00:00 UTC (4 PM PST)
        useSharedDatabase: true, // Staging uses shared database initially
        sharedDatabaseEnvironment: 'dev', // Use existing dev tables as the shared database
    },
    prod: {
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: 'us-east-1' },
        stackName: 'OpenSourceTrackerProdV2',
        domainName: undefined, // Add your custom domain here if needed
        githubTokenSecretName: 'github-token-prod',
        devCredentialsSecretName: undefined, // No staging credentials for prod
        dataCollectionSchedule: 'cron(0 */3 * * ? *)', // Every 3 hours starting at 00:00 UTC (4 PM PST)
        useSharedDatabase: true, // Prod uses shared database initially
        sharedDatabaseEnvironment: 'dev', // Use existing dev tables as the shared database
    }
};
const config = envConfigs[environment];
if (!config) {
    throw new Error(`Invalid environment: ${environment}. Must be 'staging' or 'prod'`);
}
new open_source_tracker_stack_1.OpenSourceTrackerStack(app, config.stackName, {
    environment,
    domainName: config.domainName,
    githubTokenSecretName: config.githubTokenSecretName,
    devCredentialsSecretName: config.devCredentialsSecretName,
    dataCollectionSchedule: config.dataCollectionSchedule,
    useSharedDatabase: config.useSharedDatabase,
    sharedDatabaseEnvironment: config.sharedDatabaseEnvironment,
    env: config.env,
    description: `Open Source Tracker ${environment} environment`,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsZ0ZBQTBFO0FBRTFFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLCtCQUErQjtBQUMvQixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxTQUFTLENBQUM7QUFFdkUsc0NBQXNDO0FBQ3RDLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7UUFDdEUsU0FBUyxFQUFFLDRCQUE0QjtRQUN2QyxVQUFVLEVBQUUsU0FBUyxFQUFFLCtCQUErQjtRQUN0RCxxQkFBcUIsRUFBRSxrQkFBa0I7UUFDekMsd0JBQXdCLEVBQUUscUJBQXFCO1FBQy9DLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLGlEQUFpRDtRQUNoRyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUseUNBQXlDO1FBQ2xFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxpREFBaUQ7S0FDcEY7SUFDRCxJQUFJLEVBQUU7UUFDSixHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFO1FBQ3RFLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsVUFBVSxFQUFFLFNBQVMsRUFBRSx3Q0FBd0M7UUFDL0QscUJBQXFCLEVBQUUsbUJBQW1CO1FBQzFDLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxrQ0FBa0M7UUFDdkUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsaURBQWlEO1FBQ2hHLGlCQUFpQixFQUFFLElBQUksRUFBRSxzQ0FBc0M7UUFDL0QseUJBQXlCLEVBQUUsS0FBSyxFQUFFLGlEQUFpRDtLQUNwRjtDQUNGLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsV0FBc0MsQ0FBQyxDQUFDO0FBRWxFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFdBQVcsK0JBQStCLENBQUMsQ0FBQztBQUN0RixDQUFDO0FBRUQsSUFBSSxrREFBc0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUNoRCxXQUFXO0lBQ1gsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO0lBQzdCLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxxQkFBcUI7SUFDbkQsd0JBQXdCLEVBQUUsTUFBTSxDQUFDLHdCQUF3QjtJQUN6RCxzQkFBc0IsRUFBRSxNQUFNLENBQUMsc0JBQXNCO0lBQ3JELGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxpQkFBaUI7SUFDM0MseUJBQXlCLEVBQUUsTUFBTSxDQUFDLHlCQUF5QjtJQUMzRCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7SUFDZixXQUFXLEVBQUUsdUJBQXVCLFdBQVcsY0FBYztDQUM5RCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgT3BlblNvdXJjZVRyYWNrZXJTdGFjayB9IGZyb20gJy4uL2xpYi9vcGVuLXNvdXJjZS10cmFja2VyLXN0YWNrJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuLy8gR2V0IGVudmlyb25tZW50IGZyb20gY29udGV4dFxuY29uc3QgZW52aXJvbm1lbnQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbnZpcm9ubWVudCcpIHx8ICdzdGFnaW5nJztcblxuLy8gRW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbnNcbmNvbnN0IGVudkNvbmZpZ3MgPSB7XG4gIHN0YWdpbmc6IHtcbiAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuICAgIHN0YWNrTmFtZTogJ09wZW5Tb3VyY2VUcmFja2VyU3RhZ2luZ1YyJyxcbiAgICBkb21haW5OYW1lOiB1bmRlZmluZWQsIC8vIE5vIGN1c3RvbSBkb21haW4gZm9yIHN0YWdpbmdcbiAgICBnaXRodWJUb2tlblNlY3JldE5hbWU6ICdnaXRodWItdG9rZW4tZGV2JyxcbiAgICBkZXZDcmVkZW50aWFsc1NlY3JldE5hbWU6ICdzdGFnaW5nLWNyZWRlbnRpYWxzJyxcbiAgICBkYXRhQ29sbGVjdGlvblNjaGVkdWxlOiAnY3JvbigwICovMyAqICogPyAqKScsIC8vIEV2ZXJ5IDMgaG91cnMgc3RhcnRpbmcgYXQgMDA6MDAgVVRDICg0IFBNIFBTVClcbiAgICB1c2VTaGFyZWREYXRhYmFzZTogdHJ1ZSwgLy8gU3RhZ2luZyB1c2VzIHNoYXJlZCBkYXRhYmFzZSBpbml0aWFsbHlcbiAgICBzaGFyZWREYXRhYmFzZUVudmlyb25tZW50OiAnZGV2JywgLy8gVXNlIGV4aXN0aW5nIGRldiB0YWJsZXMgYXMgdGhlIHNoYXJlZCBkYXRhYmFzZVxuICB9LFxuICBwcm9kOiB7XG4gICAgZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICBzdGFja05hbWU6ICdPcGVuU291cmNlVHJhY2tlclByb2RWMicsXG4gICAgZG9tYWluTmFtZTogdW5kZWZpbmVkLCAvLyBBZGQgeW91ciBjdXN0b20gZG9tYWluIGhlcmUgaWYgbmVlZGVkXG4gICAgZ2l0aHViVG9rZW5TZWNyZXROYW1lOiAnZ2l0aHViLXRva2VuLXByb2QnLFxuICAgIGRldkNyZWRlbnRpYWxzU2VjcmV0TmFtZTogdW5kZWZpbmVkLCAvLyBObyBzdGFnaW5nIGNyZWRlbnRpYWxzIGZvciBwcm9kXG4gICAgZGF0YUNvbGxlY3Rpb25TY2hlZHVsZTogJ2Nyb24oMCAqLzMgKiAqID8gKiknLCAvLyBFdmVyeSAzIGhvdXJzIHN0YXJ0aW5nIGF0IDAwOjAwIFVUQyAoNCBQTSBQU1QpXG4gICAgdXNlU2hhcmVkRGF0YWJhc2U6IHRydWUsIC8vIFByb2QgdXNlcyBzaGFyZWQgZGF0YWJhc2UgaW5pdGlhbGx5XG4gICAgc2hhcmVkRGF0YWJhc2VFbnZpcm9ubWVudDogJ2RldicsIC8vIFVzZSBleGlzdGluZyBkZXYgdGFibGVzIGFzIHRoZSBzaGFyZWQgZGF0YWJhc2VcbiAgfVxufTtcblxuY29uc3QgY29uZmlnID0gZW52Q29uZmlnc1tlbnZpcm9ubWVudCBhcyBrZXlvZiB0eXBlb2YgZW52Q29uZmlnc107XG5cbmlmICghY29uZmlnKSB7XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBlbnZpcm9ubWVudDogJHtlbnZpcm9ubWVudH0uIE11c3QgYmUgJ3N0YWdpbmcnIG9yICdwcm9kJ2ApO1xufVxuXG5uZXcgT3BlblNvdXJjZVRyYWNrZXJTdGFjayhhcHAsIGNvbmZpZy5zdGFja05hbWUsIHtcbiAgZW52aXJvbm1lbnQsXG4gIGRvbWFpbk5hbWU6IGNvbmZpZy5kb21haW5OYW1lLFxuICBnaXRodWJUb2tlblNlY3JldE5hbWU6IGNvbmZpZy5naXRodWJUb2tlblNlY3JldE5hbWUsXG4gIGRldkNyZWRlbnRpYWxzU2VjcmV0TmFtZTogY29uZmlnLmRldkNyZWRlbnRpYWxzU2VjcmV0TmFtZSxcbiAgZGF0YUNvbGxlY3Rpb25TY2hlZHVsZTogY29uZmlnLmRhdGFDb2xsZWN0aW9uU2NoZWR1bGUsXG4gIHVzZVNoYXJlZERhdGFiYXNlOiBjb25maWcudXNlU2hhcmVkRGF0YWJhc2UsXG4gIHNoYXJlZERhdGFiYXNlRW52aXJvbm1lbnQ6IGNvbmZpZy5zaGFyZWREYXRhYmFzZUVudmlyb25tZW50LFxuICBlbnY6IGNvbmZpZy5lbnYsXG4gIGRlc2NyaXB0aW9uOiBgT3BlbiBTb3VyY2UgVHJhY2tlciAke2Vudmlyb25tZW50fSBlbnZpcm9ubWVudGAsXG59KTsgIl19